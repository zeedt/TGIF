import  React,{Component,PureComponent} from 'react';
import {BackHandler,AppRegistry,View,Button,Modal,DrawerLayoutAndroid,AsyncStorage,NativeModules,Text,ScrollView,Image,FlatList,ListView,Alert,Dimensions,TouchableHighlight,ActivityIndicator,TouchableNativeFeedback,VirtualizedList} from 'react-native';
import {TabNavigator} from 'react-navigation';
import {Icon,List,ListItem} from 'react-native-elements'
import {Column as Col, Row} from 'react-native-flexbox-grid'
import ListCard from './listCard'
import AutoHeightImage from 'react-native-auto-height-image'
import ImageZoom from 'react-native-image-pan-zoom'
var PushNotification = require('react-native-push-notification');
import { Card, CardTitle, CardContent, CardAction, CardButton, CardImage } from 'react-native-material-cards'
import {Platform} from 'react-native';
import NotificationPage from './NotificationPage'
import FCM, {FCMEvent, RemoteNotificationResult, WillPresentNotificationResult, NotificationType} from 'react-native-fcm';
export default class General extends PureComponent {
    constructor(props){
        super(props);
        this.ready = false;
        this.check = false;
        this.gg = 0;
        this.showModal = false;
        this.loadingMoreValue= false;
        this.updatingIDs = [];
        this.updatingIdStatus = [];
        this.dispatchUpdateId = [];
    this.state= {imageArray:[],showModal:false};
    this.imgArrs = [{uri:"hhhhh"}];
        setInterval(()=>{
        if(this.check==false){
            this.props.fetchImage();
        }
        },5000)
        this.f = 0;                     
        this.state = {
            mydata:[],refreshing:false,loading:false,loadingMore:false,imageView:"",rimg:"",gg:0,
            data:0,presentId:"",imgStat:""}        
        setInterval(()=>{          
        if(this.ready == true){
        }  
        },10000)
    }
    componentDidMount(){
        var navigator;
        BackHandler.addEventListener('hardwareBackPress',()=>{
        })
    }
    componentWillMount(){
       
    }
    componentWillUnMount(){
    //    this.notificationListener.remove();
    } 
    mypushnotification(id){
        NotificationsAndroid.localNotification({
    title: "Local notification",
    body: "This notification was generated by the app!",
    extra: "data"
});
}
  static navigationOptions = {
    title:"HOME",
    header:null,
  };
  handleRefresh = () =>{
      this.setState({refreshing:true})
    setTimeout(()=>{
        this.setState({refreshing:false})
    },200)
  }
    getModal(renderImage){
        this.showModal = true;
        this.setState({rimg:renderImage});
}
 _keyExtractor = (item, index) => item.ID;
    render(){
        if (this.props.user.Reducers.data.length<=0){
        return(
            <ScrollView style={{backgroundColor:"#ffffff"}}  contentContainerStyle={{flexGrow: 1,}}>
            <View style={{alignItems:"center",justifyContent:"center",flex:1}}>
                <ActivityIndicator size="large" color="green" />
                <Text style={{color:"green"}}>Loading feeds</Text>
                </View>
                </ScrollView>
        )
        }else{
            this.ready = true;
            this.check = true;
            if(this.gg==0){
                this.gg = this.gg + 1;
                this.showModal = false;
            }
        return(
                <View style={{backgroundColor:"white"}}>
            <Modal visible={this.showModal} transparent={false} onRequestClose={()=>{this.showModal = false}} >
            <View style={{flex:1,alignItems:"center",justifyContent:"center",backgroundColor:"black"}}>
            <ImageZoom cropWidth={Dimensions.get('window').width}
                cropHeight={Dimensions.get('window').height-15}
                imageHeight={(Dimensions.get('window').height-15)*0.5}
                imageWidth = {Dimensions.get('window').width}
                >
                <AutoHeightImage width={Dimensions.get('window').width} imageURL={this.state.rimg} />
                </ImageZoom>
            </View>
        </Modal>
        {/*<Button
            onPress={() => {AppRegistry.registerComponent('TGIF3', () => NotificationPage);
                            NativeModules.ActivityStarter.navigateToExample5()}}
            title='Start example activity'
          />*/}
          <FlatList data={this.props.user.Reducers.data} 
                renderItem = {({item})=>
                <TouchableHighlight onPress={()=>{console.log("NN");this.getModal(item.Blob)}} ><View><ListCard item={item} /></View></TouchableHighlight>
                }
                keyExtractor={(item, index) => index}
                extraData={this.props.user.Reducers.data}  
                refreshing={this.state.refreshing}
                onRefresh={this.handleRefresh}
                removeClippedSubviews={false}
                onEndReached={()=>{console.log("Bottom reached");this.props.fetchImage()}}
                onEndReachedThreshold ={1}
                ListFooterComponent={()=>{
                    if(this.props.user.Reducers.fetching==true){
                    this.loadingMoreValue = true;                        
                    }else{this.loadingMoreValue = false;}
                    if(this.loadingMoreValue==true)
                    {return(<ActivityIndicator color="blue" style={{marginBottom:5,paddingBottom:5}} />)}
                    else{
                    return (
                        <View style={{marginBottom:5,paddingBottom:5,flex:1,alignItems:"center",justifyContent:"center"}}>
                         <Icon  name="refresh" type="MaterialCommunityIcons" color="blue" style={{paddingLeft:10}} onPress={()=>{this.setState({loadingMore:true});this.props.fetchImage(); }} />
                        </View>)
                        }
                        }}
                        />
                 </View>
        )
        }
    }
   otherMethods(){
 
        FCM.subscribeToTopic('/topics/foo-bar');
        FCM.unsubscribeFromTopic('/topics/foo-bar');
        FCM.getInitialNotification().then(notif=>console.log(notif));
        FCM.presentLocalNotification({
            id: "UNIQ_ID_STRING",                               // (optional for instant notification)
            title: "My Notification Title",                     // as FCM payload
            body: "My Notification Message",                    // as FCM payload (required)
            sound: "default",                                   // as FCM payload
            priority: "high",                                   // as FCM payload
            click_action: "ACTION",                             // as FCM payload
            badge: 10,                                          // as FCM payload IOS only, set 0 to clear badges
            number: 10,                                         // Android only
            ticker: "My Notification Ticker",                   // Android only
            auto_cancel: true,                                  // Android only (default true)
            large_icon: "ic_launcher",                           // Android only
            icon: "ic_launcher",                                // as FCM payload, you can relace this with custom icon you put in mipmap
            big_text: "Show when notification is expanded",     // Android only
            sub_text: "This is a subText",                      // Android only
            color: "red",                                       // Android only
            vibrate: 300,                                       // Android only default: 300, no vibration if you pass null
            tag: 'some_tag',                                    // Android only
            group: "group",                                     // Android only
            picture: "https://google.png",                      // Android only bigPicture style
            ongoing: true,                                      // Android only
            my_custom_data:'my_custom_field_value',             // extra data you want to throw
            lights: true,                                       // Android only, LED blinking (default false)
            show_in_foreground:true                                  // notification when app is in foreground (local & remote)
        });
 
        FCM.scheduleLocalNotification({
            fire_date: new Date().getTime(),      //RN's converter is used, accept epoch time and whatever that converter supports
            id: "UNIQ_ID_STRING",    //REQUIRED! this is what you use to lookup and delete notification. In android notification with same ID will override each other
            body: "from future past",
            repeat_interval: "week" //day, hour
        })
 
        FCM.getScheduledLocalNotifications().then(notif=>console.log(notif));
 
        //these clears notification from notification center/tray
        FCM.removeAllDeliveredNotifications()
        FCM.removeDeliveredNotification("UNIQ_ID_STRING")
 
        //these removes future local notifications
        FCM.cancelAllLocalNotifications()
        FCM.cancelLocalNotification("UNIQ_ID_STRING")
 
        FCM.setBadgeNumber(1);                                       // iOS only and there's no way to set it in Android, yet.
        FCM.getBadgeNumber().then(number=>console.log(number));     // iOS only and there's no way to get it in Android, yet.
        FCM.send('984XXXXXXXXX', {
          my_custom_data_1: 'my_custom_field_value_1',
          my_custom_data_2: 'my_custom_field_value_2'
        });
 
        FCM.deleteInstanceId()
            .then( () => {
              //Deleted instance id successfully
              //This will reset Instance ID and revokes all tokens.
            })
            .catch(error => {
              //Error while deleting instance id
            });
    } 
}